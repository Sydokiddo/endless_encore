package net.sydokiddo.endlessencore.mixin.status_effects.vulnerability;

import net.minecraft.world.effect.MobEffect;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.level.Level;
import net.sydokiddo.endlessencore.effect.ModEffects;
import org.jetbrains.annotations.Nullable;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.ModifyVariable;
import java.util.Objects;

// Amplifies incoming damage when an entity has the Vulnerability status effect

@Mixin(LivingEntity.class)
public abstract class VulnerabilityEffectMixin extends Entity {
    @Shadow public abstract boolean hasEffect(MobEffect mobEffect);

    @Shadow @Nullable public abstract MobEffectInstance getEffect(MobEffect mobEffect);

    public VulnerabilityEffectMixin(EntityType<?> type, Level world) {
        super(type, world);
    }

    @ModifyVariable(method = "hurt", at = @At("HEAD"), argsOnly = true)
    private float multiplyDamageForVulnerability(float amount) {
        if (this.hasEffect(ModEffects.VULNERABILITY)) {
            return amount + (amount * (0.50f * (Objects.requireNonNull(this.getEffect(ModEffects.VULNERABILITY)).getAmplifier() + 1)));
        }
        return amount;
    }
}
